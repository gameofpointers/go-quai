// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.25.1
// source: quai/snap/snap_messages.proto

package snap

import (
	common "github.com/dominant-strategies/go-quai/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccountRangeRequest is a request to retrieve a range of accounts from the
// account trie, id - request id to match up responses with, root - root hash of
// the account trie to serve, origin - hash of the first account to retrieve
// limit - hash of the last account to retrieve
// bytes - soft limit at which to stop returning data
type AccountRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Root   *common.ProtoHash `protobuf:"bytes,2,opt,name=root,proto3,oneof" json:"root,omitempty"`
	Origin *common.ProtoHash `protobuf:"bytes,3,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
	Limit  *common.ProtoHash `protobuf:"bytes,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Bytes  *uint64           `protobuf:"varint,5,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
}

func (x *AccountRangeRequest) Reset() {
	*x = AccountRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRangeRequest) ProtoMessage() {}

func (x *AccountRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRangeRequest.ProtoReflect.Descriptor instead.
func (*AccountRangeRequest) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{0}
}

func (x *AccountRangeRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountRangeRequest) GetRoot() *common.ProtoHash {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *AccountRangeRequest) GetOrigin() *common.ProtoHash {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *AccountRangeRequest) GetLimit() *common.ProtoHash {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *AccountRangeRequest) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

// AccountRangeResponse is a response to an AccountRangeRequest, id - id of the
// request this is a response for, accounts - consecutive accounts from the trie
// proof - list if trie nodes proving the account range
type AccountRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Accounts []*AccountData `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Proof    [][]byte       `protobuf:"bytes,3,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (x *AccountRangeResponse) Reset() {
	*x = AccountRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRangeResponse) ProtoMessage() {}

func (x *AccountRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRangeResponse.ProtoReflect.Descriptor instead.
func (*AccountRangeResponse) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{1}
}

func (x *AccountRangeResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountRangeResponse) GetAccounts() []*AccountData {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *AccountRangeResponse) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type AccountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *common.ProtoHash `protobuf:"bytes,1,opt,name=hash,proto3,oneof" json:"hash,omitempty"` // hash of the account
	Body []byte            `protobuf:"bytes,2,opt,name=body,proto3,oneof" json:"body,omitempty"` // account body in slim format
}

func (x *AccountData) Reset() {
	*x = AccountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountData) ProtoMessage() {}

func (x *AccountData) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountData.ProtoReflect.Descriptor instead.
func (*AccountData) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{2}
}

func (x *AccountData) GetHash() *common.ProtoHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *AccountData) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// StorageRangesRequest is a request to retrieve a range of storage slots from
// the storage trie, id - request id to match up responses with, root - root
// hash of the account trie to serve, accounts - account hashes of the storage
// tries to serve, origin - hash of the first storage slot to retrieve ( large
// contract mode) limit - hash of the last storage slot to retrieve ( large
// contract mode) bytes - soft limit at which to stop returning data
type StorageRangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Root     *common.ProtoHash   `protobuf:"bytes,2,opt,name=root,proto3,oneof" json:"root,omitempty"`
	Accounts *common.ProtoHashes `protobuf:"bytes,3,opt,name=accounts,proto3,oneof" json:"accounts,omitempty"`
	Origin   []byte              `protobuf:"bytes,4,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
	Limit    []byte              `protobuf:"bytes,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Bytes    *uint64             `protobuf:"varint,6,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
}

func (x *StorageRangesRequest) Reset() {
	*x = StorageRangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRangesRequest) ProtoMessage() {}

func (x *StorageRangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRangesRequest.ProtoReflect.Descriptor instead.
func (*StorageRangesRequest) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{3}
}

func (x *StorageRangesRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StorageRangesRequest) GetRoot() *common.ProtoHash {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *StorageRangesRequest) GetAccounts() *common.ProtoHashes {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *StorageRangesRequest) GetOrigin() []byte {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *StorageRangesRequest) GetLimit() []byte {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *StorageRangesRequest) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

// StorageRangesResponse represents a storage slot query response
// id - id of the request this is a response for, slots - lists of consecutive
// slots for the requested accounts, proof - merkle proofs for the *last* slot
// range, if it's incomplete
type StorageRangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slots []*StorageDatas `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	Proof [][]byte        `protobuf:"bytes,3,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (x *StorageRangesResponse) Reset() {
	*x = StorageRangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRangesResponse) ProtoMessage() {}

func (x *StorageRangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRangesResponse.ProtoReflect.Descriptor instead.
func (*StorageRangesResponse) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{4}
}

func (x *StorageRangesResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StorageRangesResponse) GetSlots() []*StorageDatas {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *StorageRangesResponse) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// StorageData represents a single storage slot in a query response
// hash - hash of the storage slot, body - storage slot content
type StorageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *common.ProtoHash `protobuf:"bytes,1,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
	Body []byte            `protobuf:"bytes,2,opt,name=body,proto3,oneof" json:"body,omitempty"`
}

func (x *StorageData) Reset() {
	*x = StorageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageData) ProtoMessage() {}

func (x *StorageData) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageData.ProtoReflect.Descriptor instead.
func (*StorageData) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{5}
}

func (x *StorageData) GetHash() *common.ProtoHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *StorageData) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type StorageDatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StorageData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StorageDatas) Reset() {
	*x = StorageDatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDatas) ProtoMessage() {}

func (x *StorageDatas) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDatas.ProtoReflect.Descriptor instead.
func (*StorageDatas) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{6}
}

func (x *StorageDatas) GetData() []*StorageData {
	if x != nil {
		return x.Data
	}
	return nil
}

// ByteCodesRequest represents a contract bytecode query
type ByteCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`              // request ID to match up responses with
	Hashes *common.ProtoHashes `protobuf:"bytes,2,opt,name=hashes,proto3,oneof" json:"hashes,omitempty"` // code hashes to retrieve the code
	Bytes  *uint64             `protobuf:"varint,3,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`  // soft limit at which to stop returning data
}

func (x *ByteCodesRequest) Reset() {
	*x = ByteCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteCodesRequest) ProtoMessage() {}

func (x *ByteCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteCodesRequest.ProtoReflect.Descriptor instead.
func (*ByteCodesRequest) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{7}
}

func (x *ByteCodesRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ByteCodesRequest) GetHashes() *common.ProtoHashes {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *ByteCodesRequest) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

type ByteCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`      // request ID  if the request this is a response for
	Codes [][]byte `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"` // requested contract bytecodes
}

func (x *ByteCodesResponse) Reset() {
	*x = ByteCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteCodesResponse) ProtoMessage() {}

func (x *ByteCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteCodesResponse.ProtoReflect.Descriptor instead.
func (*ByteCodesResponse) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{8}
}

func (x *ByteCodesResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ByteCodesResponse) GetCodes() [][]byte {
	if x != nil {
		return x.Codes
	}
	return nil
}

type TrieNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`             // request ID to match up responses with
	Root  *common.ProtoHash       `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`          // root hash of the account trie to serve
	Paths []*ProtoTrieNodePathSet `protobuf:"bytes,3,rep,name=paths,proto3" json:"paths,omitempty"`        // trie node hashes to retrieve
	Bytes *uint64                 `protobuf:"varint,4,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"` // soft limit at which to stop returning data
}

func (x *TrieNodesRequest) Reset() {
	*x = TrieNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrieNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrieNodesRequest) ProtoMessage() {}

func (x *TrieNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrieNodesRequest.ProtoReflect.Descriptor instead.
func (*TrieNodesRequest) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{9}
}

func (x *TrieNodesRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrieNodesRequest) GetRoot() *common.ProtoHash {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *TrieNodesRequest) GetPaths() []*ProtoTrieNodePathSet {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *TrieNodesRequest) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

// TrieNodePathSet is a list of trie node paths to retrieve. A naive way to
// represent trie nodes would be a simple list of `account || storage` path
// segments concatenated, but that would be very wasteful on the network.
//
// Instead, this array special cases the first element as the path in the
// account trie and the remaining elements as paths in the storage trie. To
// address an account node, the slice should have a length of 1 consisting
// of only the account path. There's no need to be able to address both an
// account node and a storage node in the same request as it cannot happen
// that a slot is accessed before the account path is fully expanded.
type ProtoTrieNodePathSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path [][]byte `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"` // list of trie node hashes
}

func (x *ProtoTrieNodePathSet) Reset() {
	*x = ProtoTrieNodePathSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTrieNodePathSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTrieNodePathSet) ProtoMessage() {}

func (x *ProtoTrieNodePathSet) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTrieNodePathSet.ProtoReflect.Descriptor instead.
func (*ProtoTrieNodePathSet) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{10}
}

func (x *ProtoTrieNodePathSet) GetPath() [][]byte {
	if x != nil {
		return x.Path
	}
	return nil
}

// TrieNodesResponse represents a state trie node query response
type TrieNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`      // request ID this is a response for
	Nodes [][]byte `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"` // requested state trie nodes
}

func (x *TrieNodesResponse) Reset() {
	*x = TrieNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quai_snap_snap_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrieNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrieNodesResponse) ProtoMessage() {}

func (x *TrieNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quai_snap_snap_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrieNodesResponse.ProtoReflect.Descriptor instead.
func (*TrieNodesResponse) Descriptor() ([]byte, []int) {
	return file_quai_snap_snap_messages_proto_rawDescGZIP(), []int{11}
}

func (x *TrieNodesResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrieNodesResponse) GetNodes() [][]byte {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var File_quai_snap_snap_messages_proto protoreflect.FileDescriptor

var file_quai_snap_snap_messages_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x71, 0x75, 0x61, 0x69, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x2f, 0x73, 0x6e, 0x61, 0x70,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x73, 0x6e, 0x61, 0x70, 0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf2, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x22, 0x64, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x90, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x48, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x15, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x22, 0x64, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x35, 0x0a, 0x0c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x11, 0x42, 0x79, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54,
	0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x39, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x32, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x2f,
	0x67, 0x6f, 0x2d, 0x71, 0x75, 0x61, 0x69, 0x2f, 0x71, 0x75, 0x61, 0x69, 0x2f, 0x73, 0x6e, 0x61,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quai_snap_snap_messages_proto_rawDescOnce sync.Once
	file_quai_snap_snap_messages_proto_rawDescData = file_quai_snap_snap_messages_proto_rawDesc
)

func file_quai_snap_snap_messages_proto_rawDescGZIP() []byte {
	file_quai_snap_snap_messages_proto_rawDescOnce.Do(func() {
		file_quai_snap_snap_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_quai_snap_snap_messages_proto_rawDescData)
	})
	return file_quai_snap_snap_messages_proto_rawDescData
}

var file_quai_snap_snap_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_quai_snap_snap_messages_proto_goTypes = []interface{}{
	(*AccountRangeRequest)(nil),   // 0: snap.AccountRangeRequest
	(*AccountRangeResponse)(nil),  // 1: snap.AccountRangeResponse
	(*AccountData)(nil),           // 2: snap.AccountData
	(*StorageRangesRequest)(nil),  // 3: snap.StorageRangesRequest
	(*StorageRangesResponse)(nil), // 4: snap.StorageRangesResponse
	(*StorageData)(nil),           // 5: snap.StorageData
	(*StorageDatas)(nil),          // 6: snap.StorageDatas
	(*ByteCodesRequest)(nil),      // 7: snap.ByteCodesRequest
	(*ByteCodesResponse)(nil),     // 8: snap.ByteCodesResponse
	(*TrieNodesRequest)(nil),      // 9: snap.TrieNodesRequest
	(*ProtoTrieNodePathSet)(nil),  // 10: snap.ProtoTrieNodePathSet
	(*TrieNodesResponse)(nil),     // 11: snap.TrieNodesResponse
	(*common.ProtoHash)(nil),      // 12: common.ProtoHash
	(*common.ProtoHashes)(nil),    // 13: common.ProtoHashes
}
var file_quai_snap_snap_messages_proto_depIdxs = []int32{
	12, // 0: snap.AccountRangeRequest.root:type_name -> common.ProtoHash
	12, // 1: snap.AccountRangeRequest.origin:type_name -> common.ProtoHash
	12, // 2: snap.AccountRangeRequest.limit:type_name -> common.ProtoHash
	2,  // 3: snap.AccountRangeResponse.accounts:type_name -> snap.AccountData
	12, // 4: snap.AccountData.hash:type_name -> common.ProtoHash
	12, // 5: snap.StorageRangesRequest.root:type_name -> common.ProtoHash
	13, // 6: snap.StorageRangesRequest.accounts:type_name -> common.ProtoHashes
	6,  // 7: snap.StorageRangesResponse.slots:type_name -> snap.StorageDatas
	12, // 8: snap.StorageData.hash:type_name -> common.ProtoHash
	5,  // 9: snap.StorageDatas.data:type_name -> snap.StorageData
	13, // 10: snap.ByteCodesRequest.hashes:type_name -> common.ProtoHashes
	12, // 11: snap.TrieNodesRequest.root:type_name -> common.ProtoHash
	10, // 12: snap.TrieNodesRequest.paths:type_name -> snap.ProtoTrieNodePathSet
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_quai_snap_snap_messages_proto_init() }
func file_quai_snap_snap_messages_proto_init() {
	if File_quai_snap_snap_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quai_snap_snap_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrieNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTrieNodePathSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quai_snap_snap_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrieNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_quai_snap_snap_messages_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_quai_snap_snap_messages_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_quai_snap_snap_messages_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_quai_snap_snap_messages_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_quai_snap_snap_messages_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_quai_snap_snap_messages_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quai_snap_snap_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_quai_snap_snap_messages_proto_goTypes,
		DependencyIndexes: file_quai_snap_snap_messages_proto_depIdxs,
		MessageInfos:      file_quai_snap_snap_messages_proto_msgTypes,
	}.Build()
	File_quai_snap_snap_messages_proto = out.File
	file_quai_snap_snap_messages_proto_rawDesc = nil
	file_quai_snap_snap_messages_proto_goTypes = nil
	file_quai_snap_snap_messages_proto_depIdxs = nil
}
